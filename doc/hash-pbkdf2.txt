*hash_pbkdf2* -- Generate a PBKDF2 key derivation of a supplied password

  string hash_pbkdf2(string algo, string password, string salt, int iterations [, int length [, bool raw_output]])~

Name of selected hashing algorithm (i.e. "md5", "sha256", "haval160,4", etc..)
See |hash_algos| for a list of supported algorithms.

The password to use for the derivation.

The salt to use for the derivation.

The number of internal iterations to perform for the derivation.

The length of the derived key to output. If "0", the length of the supplied
algorithm is used.

When set to &true;, outputs raw binary data. &false; outputs lowercase hexits.

Returns a string containing the derived key as lowercase hexits unless
{raw_output} is set to true in which case the raw binary representation of the
derived key is returned.

An E_WARNING will be raised if the algorithm is unknown, the iterations
parameter is less than or equal to 0, the length is less than 0 or the salt is
too long (greater than INT_MAX - 4).

|hash_pbkdf2| example, basic usage

<?php >
     $password = "password";
     $salt = "salt";
     $hash = hash_pbkdf2("sha256", $password, $salt, 1, 20);
     echo $hash;
?>

The above example will output:

  120fb6cffcf8b32c43e7



The PBKDF2 method can be used for hashing passwords for storage (It is NIST
approved for that use). However, it should be noted that CRYPT_BLOWFISH is
better suited for password storage and should be used instead.

|crypt| |hash| |hash_algos| |hash_init| |hash_hmac| |hash_hmac_file|

vim:ft=help:
