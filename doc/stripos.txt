*stripos* -- Find the position of the first occurrence of a case-insensitive
substring in a string

  int stripos(string haystack, string needle [, int offset])~

Find the numeric position of the first occurrence of {needle} in the
{haystack} string.

Unlike the |strpos|, |stripos| is case-insensitive.

{haystack} The string to search in.

{needle} Note that the {needle} may be a string of one or more characters.

If {needle} is not a string, it is converted to an integer and applied as the
ordinal value of a character.

{offset} If specified, search will start this number of characters counted
from the beginning of the string. Unlike |strrpos| and |strripos|, the offset
cannot be negative.

Returns the position of where the needle exists relative to the beginnning of
the {haystack} string (independent of offset). Also note that string positions
start at 0, and not 1.

Returns &false; if the needle was not found.

This function may return Boolean &false;, but may also return a non-Boolean
value which evaluates to &false;. Please read the section on Booleans for more
information. Use the === operator for testing the return value of this
function.

|stripos| examples

<?php >
  $findme    = 'a';
  $mystring1 = 'xyz';
  $mystring2 = 'ABC';
  
  $pos1 = stripos($mystring1, $findme);
  $pos2 = stripos($mystring2, $findme);
  
  // Nope, 'a' is certainly not in 'xyz'
  if ($pos1 === false) {
      echo "The string '$findme' was not found in the string '$mystring1'";
  }
  
  // Note our use of ===.  Simply == would not work as expected
  // because the position of 'a' is the 0th (first) character.
  if ($pos2 !== false) {
      echo "We found '$findme' in '$mystring2' at position $pos2";
  }
?>





This function is binary-safe.

|strpos| |strrpos| |strripos| |stristr| |substr| |str_ireplace|

vim:ft=help:
